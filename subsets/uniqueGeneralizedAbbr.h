#pragma once

using namespace std;

#include<vector>
#include<string>

/* url https://www.designgurus.io/course-play/grokking-the-coding-interview/doc/639dc70fef27e08651fb4a59 */

/*
** Given a word, write a function to generate all of its unique generalized abbreviations.
** A generalized abbreviation of a word can be generated by replacing each substring of the word
** with the count of characters in the substring. Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”.
** After replacing these substrings in the actual word by the count of characters, we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”.
**
** Note: All contiguous characters should be considered one substring, e.g., we can’t take “a” and “b” as substrings to get “11”;
** since “a” and “b” are contiguous, we should consider them together as one substring to get an abbreviation “2”.
**
** Example 1:
** Input: "BAT"
** Output: "BAT", "BA1", "B1T", "B2", "1AT", "1A1", "2T", "3"
**
** Example 2:
** Input: "code"
** Output: "code", "cod1", "co1e", "co2", "c1de", "c1d1", "c2e", "c3", "1ode", "1od1", "1o1e", "1o2", "2de", "2d1", "3e", "4"
*/

class uniqueGeneralizedAbbr
{
public:
    static vector<string> generateGeneralizedAbbreviation(const string& word)
    {
        vector<string> result;
        if (word.length() == 0) return vector<string>(1, "");
        if (word.length() == 1) { result.push_back("1"); result.push_back(word); return result; }

        vector<vector<string>> cache;
        cache.push_back(vector<string>());
        vector<string> c1;
        c1.push_back("1");
        c1.push_back(string(1, word[word.length() - 1]));
        cache.push_back(c1);

        abbrRecursive(word, word.length(), cache);

        return cache[cache.size()-1];
    }

private:
    static void abbrRecursive(const string& word, int index, vector<vector<string>>& cache)
    {
        if (index < cache.size()) return;

        //recursion step
        abbrRecursive(word, index - 1, cache);

        vector<string> add;
        vector<string> previous = cache[index - 1];
        string prefix1 = string(1, word[word.length() - index]);
        for (auto s : previous)
        {
            if (s[0] >= '0' && s[0] <= '9')
            {
                add.push_back(prefix1 + s);
            }
            else
            {
                add.push_back(prefix1 + s);
                int alphaCount = 0;
                while (alphaCount < s.length() && s[alphaCount] <= '0' || s[alphaCount] >= '9') alphaCount++;
                for (int i = 0; i < alphaCount; i++)
                {
                    add.push_back(to_string(i+1) + s.substr(i));
                }
                if (alphaCount == s.length()) add.push_back(to_string(alphaCount + 1));
            }
        }
        cache.push_back(add);
    }
};